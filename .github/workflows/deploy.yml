# name: Deployment Pipeline

# # Trigger the workflow on push to the main branch
# on:
#   push:
#     branches:
#       - main

# # Define the job
# jobs:
#   deploy:
#     name: Deploy to AWS EC2
#     runs-on: ubuntu-latest

#     steps:
#       # Check out the repository
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Set up Docker Buildx
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       # Log in to Docker Hub (if needed)
#       # - name: Log in to Docker Hub
#       #   uses: docker/login-action@v2
#       #   with:
#       #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
#       #     password: ${{ secrets.DOCKER_HUB_TOKEN }}

#       # Build the Docker image
#       - name: Build Docker image
#         run: docker build -t fastapi-app .

#       # Save the Docker image as a tar file
#       - name: Save Docker image
#         run: docker save -o fastapi-app.tar fastapi-app

#       # Add the private SSH key
#     #   - name: Add SSH Key
#     #     uses: webfactory/ssh-agent@v0.7.0
#     #     with:
#     #       ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

#       - name: Set up SSH key
#         uses: shimataro/ssh-key-action@v2
#         with:
#          key: ${{ secrets.EC2_SSH_KEY }}  # Add your SSH private key in GitHub Secrets
#          name: id_rsa  # Optional: Default is 'id_rsa'
#          known_hosts: 'github.com'  # Automatically adds GitHub to known_hosts

#       # - name: Test SSH Connection
#       #   run: ssh -T git@github.com

#       # Deploy to AWS EC2
#       - name: Deploy to EC2
#         env:
#           EC2_HOST: ${{ secrets.EC2_HOST }}  # EC2 instance public IP or DNS
#           EC2_USER: ${{ secrets.EC2_USER }}  # EC2 instance username (e.g., ubuntu)
#           APP_DIR: ${{ secrets.APP_DIR }}    # Directory on EC2 where the app is deployed
#         run: |
#           # Copy the Docker image to the EC2 instance
#           scp -o StrictHostKeyChecking=no fastapi-app.tar $EC2_USER@$EC2_HOST:$APP_DIR/fastapi-app.tar

#           # SSH into the EC2 instance and deploy the Docker image
#           ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
#           cd $APP_DIR
#           docker load -i fastapi-app.tar
#           docker stop fastapi-app || true
#           docker rm fastapi-app || true
#           docker run -d -p 80:80 --name fastapi-app fastapi-app
#           EOF



name: Deployment Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub (or your private registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Build and push the Docker image
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-app:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-app:latest

      - name: Set up SSH key
        uses: shimataro/ssh-key-action@v2
        with:
         key: ${{ secrets.EC2_SSH_KEY }}  # Add your SSH private key in GitHub Secrets
         name: id_rsa  # Optional: Default is 'id_rsa'
         known_hosts: 'github.com'  # Automatically adds GitHub to known_hosts
      # # Add the private SSH key
      # - name: Add SSH Key
      #   uses: webfactory/ssh-agent@v0.7.0
      #   with:
      #     ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # Deploy to AWS EC2
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}  # EC2 instance public IP or DNS
          EC2_USER: ${{ secrets.EC2_USER }}  # EC2 instance username (e.g., ubuntu)
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}  # Docker Hub username
        run: |
          # SSH into the EC2 instance and deploy the Docker image
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
          docker pull $DOCKER_HUB_USERNAME/fastapi-app:latest
          docker stop fastapi-app || true
          docker rm fastapi-app || true
          docker run -d -p 80:80 --name fastapi-app $DOCKER_HUB_USERNAME/fastapi-app:latest
          EOF
